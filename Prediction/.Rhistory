`==
`==`
swirl()
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
tbl
tbl(pack_sum)
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View("top_counts_sorted")
View(top_counts_sorted)
quantile(pack$sum$unique, probs = 0.99)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
install.packages("iris")
library(iris)
packageVersion(R)
packageVersion("R")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
summary(translmReg1)
translmReg1 <- lm(mpg ~ ., mtcars)
summary(translmReg1)$coef
baseReg <- lm(mpg ~ am, mtcars)
anova(ideal, baseReg)$coef
anova(ideal, baseReg)
ideal <- step(translmReg1, direction = "both")
summary(ideal)
summary(ideal)$coef
summary(ideal)$residuals
summary(ideal)$rsquared
1100+c(-1,1)*qnorm(.975)*30/9
1100+c(-1,1)*qt(.975)*30/9
1100+c(-1,1)*qnorm(.975)*30/3
1100+c(-1,1)*qt(.975, df = n-1)*30/sqrt(9)
1100+c(-1,1)*qt(.975, n-1)*30/sqrt(9)
1100+c(-1,1)*qt(.975, 8)*30/sqrt(9)
2*sqrt(9)/qt(.95, n-1)
2*sqrt(9)/qt(.95, 8)
2*sqrt(9)/qt(.975, 8)
t.test(3-5)
newm <- 3
oldm <- 5
n = 20
newm - oldm + c(-1,1) * qt(0.975, n-2) * .6^2/sqrt(n)
std <- sqrt((.6^2-.68^2)/2)
std <- sqrt((.68^2-.60^2)/2)
std
newm - oldm + c(-1,1) * qt(0.975, n-2) * std^2/sqrt(n)
std <- sqrt((.68-.60)/2)
std
newm - oldm + c(-1,1) * qt(0.975, n-2) * std^2/sqrt(n)
oldm - newm + c(-1,1) * qt(0.975, n-2) * std^2/sqrt(.2)
oldm - newm + c(-1,1) * qt(0.975, n-2) * std^2/sqrt(0.2)
oldm - newm + c(-1,1) * qt(0.975, n-2) * std^2 *sqrt(.2)
newm - oldm + c(-1,1) * qt(0.975, n-2) * std^2 /sqrt(.2)
oldm - newm + c(-1,1) * qt(0.975, n-2) * std^2 /sqrt(10)
newm - oldm + c(-1,1) * qt(0.975, n-2) * std^2 /sqrt(10)
quantile = 0.975 # is 95% with 2.5% on both sides of the range
n_y <- 10 # nights new system
n_x <- 10 # nights old system
var_y <- 0.60 # variance new (sqrt of σ)
var_x <- 0.68 # variance old (sqrt of σ)
μ_y <- 3# average hours new system
μ_x <- 5# average hours old system
# calculate pooled standard deviation
σ_p <- sqrt(((n_x - 1) * var_x + (n_y - 1) * var_y)/(n_x + n_y - 2))
confidenceInterval <- μ_y - μ_x + c(-1, 1) * qt(quantile, df=n_y+n_x-2) * σ_p * (1 / n_x + 1 / n_y)^.5
round(confidenceInterval,2)
std <- sqrt(sqrt((.68-.60)/2))
std
newm - oldm + c(-1,1) * qt(0.975, n-2) * std^2 /sqrt(.2)
oldm - newm + c(-1,1) * qt(0.975, n-2) * std^2 /sqrt(.2)
newm - oldm + c(-1,1) * qt(0.95, n-2) * std^2 /sqrt(.2)
newm - oldm + c(-1,1) * qt(0.9, n-2) * std^2 /sqrt(.2)
2.77-1.22
2.59-1.4
2 + c(-1,1) * qt(0.975, n200-2) * 2.5^2 /sqrt(.02)
2 + c(-1,1) * qt(0.975, 200-2) * 2.5^2 /sqrt(.02)
-2 + c(-1,1) * qt(0.975, 200-2) * 2.5^2 /sqrt(.02)
std <- sqrt((.68-.6)/8)
std <- sqrt((.68-.6)/18)
std
newm - oldm + c(-1,1) * qt(0.9, n-2) * std^2 /sqrt(.2)
newm - oldm + c(-1,1) * qt(0.95, n-2) * std^2 /sqrt(.2)
newm - oldm + c(-1,1) * qt(0.95, n-2) * std^2 *sqrt(.2)
std <- sqrt((.68-.6)/2)
std
newm - oldm + c(-1,1) * qt(0.95, n-2) * std^2 *sqrt(.2)
std <- sqrt((.68+.6)/2)
std
newm - oldm + c(-1,1) * qt(0.95, n-2) * std^2 *sqrt(.2)
newm - oldm + c(-1,1) * qt(0.975, n-2) * std^2 *sqrt(.2)
newm - oldm + c(-1,1) * qt(0.95, n-2) * std^2 /sqrt(.2)
oldm - newm + c(-1,1) * qt(0.95, n-2) * std^2 /sqrt(.2)
newm - oldm + c(-1,1) * qt(0.95, n-2) * std^2 *sqrt(.2)
newm - oldm + c(-1,1) * qt(0.95, n-2) * std^2 /sqrt(.2)
σ_p
std
newm - oldm + c(-1,1) * qt(0.975, n-2) * std^2 /sqrt(.2)
newm - oldm + c(-1,1) * qt(0.975, n-2) * std^2 *sqrt(.2)
n
std2 <- sqrt((99*(4+.25)/198)
std2 <- sqrt((99*(4+.25)/198))
std2
-2 + c(-1,1) * qt(0.975, n-2) * std^2 *sqrt(.02)
-2 + c(-1,1) * qt(0.975, 198) * std^2 *sqrt(.02)
2 + c(-1,1) * qt(0.975, 198) * std^2 *sqrt(.02)
2 + c(-1,1) * qt(0.95, 198) * std^2 *sqrt(.02)
2 + c(-1,1) * qt(0.95, 198) * std^2 /sqrt(.02)
std3 <- sqrt((8*(1.5^2+1.8^2)/16))
std3
-2 + c(-1,1) * qt(0.975, 198) * std2^2 /sqrt(.02)
-2 + c(-1,1) * qt(0.975, 198) * std2^2 *sqrt(.02)
2 + c(-1,1) * qt(0.975, 198) * std2^2 *sqrt(.02)
-4 + c(-1,1) * qt(0.975, 16) * std3^2 *sqrt(2/9)
-4 + c(-1,1) * qt(0.95, 16) * std3^2 *sqrt(2/9)
quantile = 0.95 # is 90% with 5% on both sides of the range
n_y <- 9 # subjects treated
n_x <- 9 # subjects placebo
σ_y <- 1.5# kg/m2 std.dev. treated
σ_x <- 1.8# kg/m2 std.dev. placebo
μ_y <- -3#  kg/m2 average difference treated
μ_x <- 1#  kg/m2 average difference placebo
# calculate pooled standard deviation
σ_p <- sqrt(((n_x - 1) * σ_x^2 + (n_y - 1) * σ_y^2)/(n_x + n_y - 2))
confidenceInterval <-  μ_y - μ_x + c(-1, 1) * qt(quantile, df=n_y+n_x-2) * σ_p * (1 / n_x + 1 / n_y)^.5
round(confidenceInterval,3)
σ_p
std3
confidenceInterval <-  μ_y - μ_x + c(-1, 1) * qt(quantile, df=n_y+n_x-2) * std3 * (1 / n_x + 1 / n_y)^.5
confidenceInterval
confidenceInterval <-  μ_y - μ_x + c(-1, 1) * qt(0.95, 16) * std3 * (1 / n_x + 1 / n_y)^.5
confidenceInterval
confidenceInterval <-  -4 + c(-1, 1) * qt(0.95, 16) * std3 * (1 / n_x + 1 / n_y)^.5
confidenceInterval
confidenceInterval <-  -4 + c(-1, 1) * qt(0.95, 16) * std3 * sqrt(2/9)
confidenceInterval
-4 + c(-1, 1) * qt(0.95, 16) * std3 * sqrt(2/9)
2 + c(-1,1) * qt(0.975, 198) * std2 *sqrt(.02)
-2 + c(-1,1) * qt(0.975, n-2) * std *sqrt(.02)
2 + c(-1,1) * qt(0.975, 198) * std2 /sqrt(.02)
2 + c(-1,1) * qt(0.975, 198) * std2 /sqrt(200)
subject <- c(1:5)
subject
bseline <- c(140, 138, 150, 148, 135)
bseline
wk2 <- c(132, 135, 151, 146, 130)
sbp <- cbind(subject, bseline, wk2)
names(sbp) <- c("Subject", "Baseline", "Week 2")
sbp
colnames(sbp) <- c("Subject", "Baseline", "Week 2")
sbp
sbp <- table(sbp)
sbp
sbp <- cbind(subject, bseline, wk2)
sbp <- as.table(sbp)
sbp
sbp <- sbp-1
sbp
sbp <- cbind(subject, bseline, wk2)
sbp <- as.table(sbp)
sbp <- sbp[,-1]
sbp
sbp <- cbind(subject, bseline, wk2)
sbp <- as.table(sbp)
names(sbp) <- c("Subject", "Baseline", "Week 2")
sbp
sd(sbp)
mean(sbp)
t.test(bseline, wk2)
t.test(bseline, wk2, alternatu)
t.test(bseline, wk2, paired = TRUE)
1100+c(-1,1)*qt(.95/2,8)*30/3
1100+c(-1,1)*qt((.95/2),8)*30/3
1100+c(-1,1)*qt((.95/2),8)*(30/3)
1100+c(-1,1)*qt(1-.05/2,8)*30/3
1-.05
hist(runif(1000))
hist(runif(40))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
set.seed(143)
nosim <- 1000
n = 40
lambda <- 0.2
distribution.mat <- matrix(rexp(nosim * n, rate = lambda), nosim)
theory.mean <- 1/lambda
print(paste("Theoretical Mean: ", theory.mean))
row.mean <- rowMeans(distribution.mat)
print(paste("Sample Mean: ", round(mean(row.mean), 4)))
theory.var <- 1/lambda^2
print(paste("Theoretical Variance: ", theory.var))
print(paste("Sample Variance: ", round(var(row.mean), 4)))
theory.var <- (1/lambda^2)/n
print(paste("Theoretical Variance: ", theory.var))
hist(distribution.mat)
dmh = NULL
for(i in 1:1000) dmh = c(dmh, mean(rexp(1000)))
hist(dmh)
abline(density(theory.var))
hist(apply(distribution.mat, 1, mean))
hist(apply(distribution.mat, 1, mean), breaks = 50)
hist(row.mean)
hist(row.mean, breaks = 50)
hist(apply(distribution.mat, 1, mean), breaks = 50)
lines(density(row.mean))
abline(v=1/lambda, col = "red")
xfit <- seq(min(row.mean), max(row.mean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
lines(xfit, yfit, pch=22, col="red", lty=2)
density(apply(distribution.mat, 1, mean), breaks = 50)
density(row.mean), breaks = 50)
library(ggplot2)
fit <- ggplot(graph.data, aes(x = row.mean))
graph.data <- data.frame(row.mean)
fit <- ggplot(graph.data, aes(x = row.mean))
fit
fit <- fit + geom_histogram(aes(y=..density..), fill = "magenta")
fit
fit <- fit + geom_histogram(aes(y=..density..), colour = "black", fill = "magenta")
fit
fit + geom_density(colour = "blue", size = 1)
hist(distribution.mat, col = "purple")
hist(row.mean, col = "purple")
hist(row.mean, col = "purple", main = "Histogram of Row Averages")
density(row.mean)
density(row.mean)
plot(density(row.mean))
plot(density(row.mean), break = 50)
fit <- fit + geom_histogram(aes(y=..density..), binwidth = 1, colour = "black", fill = "magenta")
fit + geom_density(colour = "blue", size = 1)
fit <- fit + geom_histogram(aes(y=..density..), binwidth = 0.1, colour = "black", fill = "magenta")
fit + geom_density(colour = "blue", size = 1)
fit <- fit + geom_histogram(aes(y=..density..), binwidth = 0.5, colour = "black", fill = "magenta")
fit + geom_density(colour = "blue", size = 1)
fit <- ggplot(graph.data, aes(x = row.mean))
fit <- fit + geom_histogram(aes(y=..density..), binwidth = 0.1, colour = "black", fill = "magenta")
fit + geom_density(colour = "blue", size = 1)
fit <- fit + geom_histogram(aes(y=..density..), binwidth = 0.4, colour = "black", fill = "magenta")
fit + geom_density(colour = "blue", size = 1)
fit <- fit + geom_histogram(aes(y=..density..), binwidth = 0.2, colour = "black", fill = "magenta")
fit + geom_density(colour = "blue", size = 1)
fit <- ggplot(graph.data, aes(x = row.mean))
fit <- fit + geom_histogram(aes(y=..density..), binwidth = 0.2, colour = "black", fill = "magenta")
fit + geom_density(colour = "blue", size = 1)
fit <- ggplot(graph.data, aes(x = row.mean))
fit <- fit + geom_histogram(aes(y=..density..), binwidth = 0.1, colour = "black", fill = "magenta")
fit + geom_density(colour = "blue", size = 1)
fit <- ggplot(graph.data, aes(x = row.mean))
fit <- fit + geom_histogram(aes(y=..density..), colour = "black", fill = "magenta")
fit + geom_density(colour = "blue", size = 1)
fit <- ggplot(graph.data, aes(x = row.mean))
fit <- fit + geom_histogram(aes(y=..density..), binwidth = x, colour = "black", fill = "magenta")
fit + geom_density(colour = "blue", size = 1)
fit <- ggplot(graph.data, aes(x = row.mean))
fit <- fit + geom_histogram(aes(y=..density..), colour = "black", fill = "magenta")
fit + geom_density(colour = "blue", size = 1)
xlab="", col = "magenta")
drawn from exponential distribution with lambda=0.2,
drawn from exponential distribution with lambda=0.2",
hist(row.mean, breaks=50, prob=TRUE, main="Distribution of averages of samples, drawn from exponential distribution with lambda=0.2",xlab="", col = "magenta")
lines(density(row.mean))
abline(v=1/lambda, col="blue")
xfit <- seq(min(row.mean), max(row.mean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
lines(xfit, yfit, pch=22, col="red", lty=2)
hist(row.mean, breaks=50, prob=TRUE, main="Distribution of averages of samples, drawn from exponential distribution with lambda=0.2",xlab="", col = "lightblue")
lines(density(row.mean))
# theoretical center of distribution
abline(v=1/lambda, col="blue")
abline(v=1/lambda, col="black")
xfit <- seq(min(row.mean), max(row.mean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
lines(xfit, yfit, pch=22, col="magenta", lty=2)
legend('topright', c("Simulation", "Theoretical"), lty=c(1,2), col=c("black", "magenta"))
legend('topright', c("Simulation", "Theoretical", Theoretical Mean), lty=c(1,3), col=c("black", "magenta", "black"))
abline(density(row.mean), col = "black")
abline(v=1/lambda, col="black")
xfit <- seq(min(row.mean), max(row.mean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
lines(xfit, yfit, pch=22, col="magenta", lty=2)
# add legend
legend('topright', c("Simulation", "Theoretical", "Theoretical Mean""), lty=c(1,3), col=c("black", "magenta", "black"))
legend('topright', c("Simulation", "Theoretical", "Theoretical Mean"), lty=c(1,3), col=c("black", "magenta", "black"))
legend('topright', c("Simulation Density", "Theoretical Density", "Theoretical Mean"), lty=c(1,3), col=c("black", "magenta", "black"))
abline(density(row.mean), col = "black")
abline(v=1/lambda, col="black")
xfit <- seq(min(row.mean), max(row.mean), length=100)
hist(row.mean, breaks=50, prob=TRUE, main="Distribution of averages of 40 samples",xlab="", col = "lightblue")
abline(density(row.mean), col = "black")
abline(v=1/lambda, col="black")
xfit <- seq(min(row.mean), max(row.mean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
abline(xfit, yfit, pch=22, col="magenta", lty=2)
legend('topright', c("Simulation Density", "Theoretical Density", "Theoretical Mean"), lty=c(1,3), col=c("black", "magenta", "black"))
hist(row.mean, breaks=50, prob=TRUE, main="Distribution of averages of 40 samples",xlab="", col = "lightblue")
lines(density(row.mean), col = "black")
abline(v=1/lambda, col="black")
xfit <- seq(min(row.mean), max(row.mean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
lines(xfit, yfit, pch=22, col="magenta", lty=2)
print(paste("Sample Mean: ", round(mean(row.mean), 4)))
print(paste("Sample Variance: ", round(var(row.mean), 4)))
print(paste("Theoretical Variance: ", theory.var))
data("ToothGrowth")
summary(ToothGrowth)
head(ToothGrowth)
?ToothGrowth
plot(ToothGrowth)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
xlab("Dose in miligrams") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Supplement type"))
plot(len ~ supp+dose,ToothGrowth)
summary(ToothGrowth$dose)
levels(ToothGrowth$dose)
levels(as.factor(ToothGrowth$dose)
)
boxplot(len ~ supp, ToothGrowth)
boxplot(len ~ supp, ToothGrowth, col = c("lightblue", "gold"))
boxplot(len ~ as.factor(dose), ToothGrowth, col = c("lightgreen", "brown"))
boxplot(len ~ as.factor(dose), ToothGrowth, col = c("lightgreen", "brown", "yellow"))
par(mfrow(2,1))
boxplot(len ~ supp, ToothGrowth, col = c("lightblue", "gold"))
boxplot(len ~ as.factor(dose), ToothGrowth, col = c("lightgreen", "brown", "yellow"))
par(mfcol(2,1))
?mfrow
par(mfrow = c(2,1))
boxplot(len ~ supp, ToothGrowth, col = c("lightblue", "gold"))
boxplot(len ~ as.factor(dose), ToothGrowth, col = c("lightgreen", "brown", "yellow"))
boxplot(len ~ as.factor(dose)+supp, ToothGrowth, col = c("lightgreen", "brown", "yellow"))
boxplot(len ~ as.factor(dose)+supp, ToothGrowth, col = c("lightgreen", "brown", "yellow"))
boxplot(len ~ as.factor(dose)+supp, ToothGrowth, col = c("lightgreen", "brown", "yellow", "lightblue", "gold", "orange"), main = "Tooth Length by Dose and Supplement", ylab = "Tooth Length (mm)", xlab = "Dose (mg) & Supplement Type")
```
## Analysis
fit <- lm(len ~ dose + supp, data=ToothGrowth)
summary(fit)
fit$coefficients[[1]]
fit$coefficients[[2]]
abs(fit$coefficients[[3]])
confint(fit)
setwd("/Users/sandraezidiegwu/Documents/Data Science/Capstone Project/final/en_US/")
shiny::runApp()
?readRDS
runApp()
getwd()
getwd()
runApp('~/Documents/Data Science/Capstone Project/Prediction')
setwd("/Users/sandraezidiegwu/Documents/Data Science/Capstone Project/Prediction/")
runApp()
runApp()
runApp()
test <- readRDS("./finaltrigram.RData")
